{"ast":null,"code":"import Axios from \"axios\";\nimport AccountService from \"./AccountService\";\nimport { LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY, SESSION_STORAGE_AUTHENTICATION_TOKEN_KEY } from '../Utility/GlobalConstants';\nimport createAuthRefreshInterceptor from 'axios-auth-refresh';\n\nclass ApiUtil {\n  createJwtToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  setupInterceptors(token, handler) {\n    console.log(\"setting up interceptors\");\n    const interceptor = this.setupRequestInterceptor(token);\n\n    const refreshAuthLogic = failedRequest => {\n      Axios.interceptors.request.eject(requestInterceptor);\n      return AccountService.refreshToken(token).then(response => {\n        console.log(\"Got a response\"); //localStorage.setItem('token', response.data.token);\n        //failedRequest.response.config.headers['Authorization'] = 'Bearer ' + tokenRefreshResponse.data.token;\n\n        return Promise.resolve();\n      }).catch(error => {\n        console.log(\"Error has occured\");\n        return Promise.reject(error);\n      });\n    };\n\n    createAuthRefreshInterceptor(Axios, refreshAuthLogic);\n  }\n\n  setupRequestInterceptor(token) {\n    let header = this.createJwtToken(token);\n    const interceptor = Axios.interceptors.request.use(config => {\n      config.headers.authorization = header;\n      return config;\n    });\n    console.log(\"interceptor returned is \" + interceptor);\n    return interceptor;\n  }\n\n  setupResponseInterceptor(token, handler, requestInterceptor) {\n    const interceptor = Axios.interceptors.response.use(response => response, error => {\n      if (error.response.status !== 401) return Promise.reject(error);\n      Axios.interceptors.response.eject(interceptor);\n      Axios.interceptors.request.eject(requestInterceptor);\n      AccountService.refreshToken(token).then(response => {\n        this.setupInterceptors(response.data.token);\n        if (localStorage.getItem(LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY)) localStorage.setItem(LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY, response.data.token);\n        sessionStorage.setItem(SESSION_STORAGE_AUTHENTICATION_TOKEN_KEY, response.data.token);\n      }).catch(error => {\n        console.log(\"error again\");\n        sessionStorage.clear();\n        localStorage.clear();\n        console.log(requestInterceptor);\n        handler();\n        return Promise.reject(error);\n      });\n    });\n    return interceptor;\n  }\n\n}\n\nexport default new ApiUtil();","map":{"version":3,"sources":["D:/Projects/Birthday Calendar/birthday-calendar-react/src/ApiServices/ApiUtil.js"],"names":["Axios","AccountService","LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY","SESSION_STORAGE_AUTHENTICATION_TOKEN_KEY","createAuthRefreshInterceptor","ApiUtil","createJwtToken","token","setupInterceptors","handler","console","log","interceptor","setupRequestInterceptor","refreshAuthLogic","failedRequest","interceptors","request","eject","requestInterceptor","refreshToken","then","response","Promise","resolve","catch","error","reject","header","use","config","headers","authorization","setupResponseInterceptor","status","data","localStorage","getItem","setItem","sessionStorage","clear"],"mappings":"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","sourcesContent":["import Axios from \"axios\"\r\nimport AccountService from \"./AccountService\"\r\nimport { LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY, SESSION_STORAGE_AUTHENTICATION_TOKEN_KEY } from '../Utility/GlobalConstants'\r\nimport createAuthRefreshInterceptor from 'axios-auth-refresh';\r\n\r\nclass ApiUtil {\r\n    createJwtToken(token) {\r\n        return 'Bearer ' + token\r\n    }\r\n\r\n    setupInterceptors(token, handler) {\r\n        console.log(\"setting up interceptors\")\r\n        const interceptor = this.setupRequestInterceptor(token)\r\n        const refreshAuthLogic = failedRequest => \r\n        {\r\n            Axios.interceptors.request.eject(requestInterceptor)\r\n            return AccountService.refreshToken(token)\r\n            .then(response => {\r\n                console.log(\"Got a response\")\r\n                //localStorage.setItem('token', response.data.token);\r\n                //failedRequest.response.config.headers['Authorization'] = 'Bearer ' + tokenRefreshResponse.data.token;\r\n                return Promise.resolve();\r\n            })\r\n            .catch(error => {\r\n                console.log(\"Error has occured\")\r\n                return Promise.reject(error)\r\n            })\r\n        }\r\n            \r\n        createAuthRefreshInterceptor(Axios, refreshAuthLogic);\r\n\r\n    } \r\n\r\n    setupRequestInterceptor(token) {\r\n        let header = this.createJwtToken(token)\r\n        const interceptor = Axios.interceptors.request.use(\r\n            (config) => {\r\n                config.headers.authorization = header\r\n                return config\r\n            }\r\n        )\r\n        console.log(\"interceptor returned is \" + interceptor)\r\n        return interceptor\r\n    }\r\n\r\n    setupResponseInterceptor(token, handler, requestInterceptor) {\r\n        const interceptor = Axios.interceptors.response.use(\r\n            response => response,\r\n            error =>\r\n            {\r\n                if (error.response.status !== 401) return Promise.reject(error);\r\n                Axios.interceptors.response.eject(interceptor)\r\n                Axios.interceptors.request.eject(requestInterceptor)\r\n                AccountService.refreshToken(token)\r\n                .then(\r\n                    response => {\r\n                        this.setupInterceptors(response.data.token)\r\n                        if (localStorage.getItem(LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY))  localStorage.setItem(LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY, response.data.token)\r\n                        sessionStorage.setItem(SESSION_STORAGE_AUTHENTICATION_TOKEN_KEY, response.data.token)\r\n                    }\r\n                )\r\n                .catch(\r\n                    error => {\r\n                        console.log(\"error again\")\r\n                        sessionStorage.clear()\r\n                        localStorage.clear()\r\n                        console.log(requestInterceptor)\r\n                        handler()                        \r\n                        return Promise.reject(error);\r\n                    }\r\n                )\r\n            }\r\n        )\r\n        return interceptor\r\n    }\r\n}\r\n\r\nexport default new ApiUtil()"]},"metadata":{},"sourceType":"module"}