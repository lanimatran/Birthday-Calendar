{"ast":null,"code":"import Axios from \"axios\";\nimport AccountService from \"./AccountService\";\nimport { LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY, SESSION_STORAGE_AUTHENTICATION_TOKEN_KEY } from '../Utility/GlobalConstants';\n\nclass ApiUtil {\n  createJwtToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  setupInterceptors(token, handler) {\n    this.setupRequestInterceptor(token);\n    this.setupResponseInterceptor(handler);\n  }\n\n  setupRequestInterceptor(token) {\n    let header = this.createJwtToken(token);\n    Axios.interceptors.request.use(config => {\n      config.headers.authorization = header;\n      return config;\n    });\n  }\n\n  setupResponseInterceptor(handler) {\n    const interceptor = Axios.interceptors.response.use(response => response, error => {\n      console.log(\"Error has occured\");\n      console.log(error.response);\n      if (error.response.status !== 401) return Promise.reject(error);\n      console.log(\"Error was 401\");\n      Axios.interceptors.response.eject(interceptor);\n      AccountService.refreshToken().then(response => {\n        console.log(\"I got to response\");\n        this.setupInterceptors(response.data.token);\n        if (localStorage.getItem(LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY)) localStorage.setItem(LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY, response.data.token);\n        sessionStorage.setItem(SESSION_STORAGE_AUTHENTICATION_TOKEN_KEY, response.data.token);\n      }).catch(error => {\n        sessionStorage.clear();\n        localStorage.clear();\n        console.log(\"I got here to catch error in refresh API\");\n        handler();\n        return Promise.reject(error);\n      });\n    });\n  }\n\n}\n\nApiUtil.requestInterceptor = null;\nexport default new ApiUtil();","map":{"version":3,"sources":["D:/Projects/Birthday Calendar/birthday-calendar-react/src/ApiServices/ApiUtil.js"],"names":["Axios","AccountService","LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY","SESSION_STORAGE_AUTHENTICATION_TOKEN_KEY","ApiUtil","createJwtToken","token","setupInterceptors","handler","setupRequestInterceptor","setupResponseInterceptor","header","interceptors","request","use","config","headers","authorization","interceptor","response","error","console","log","status","Promise","reject","eject","refreshToken","then","data","localStorage","getItem","setItem","sessionStorage","catch","clear","requestInterceptor"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,sCAAT,EAAiDC,wCAAjD,QAAiG,4BAAjG;;AAEA,MAAMC,OAAN,CAAc;AAGVC,EAAAA,cAAc,CAACC,KAAD,EAAQ;AAClB,WAAO,YAAYA,KAAnB;AACH;;AAEDC,EAAAA,iBAAiB,CAACD,KAAD,EAAQE,OAAR,EAAiB;AAC9B,SAAKC,uBAAL,CAA6BH,KAA7B;AACA,SAAKI,wBAAL,CAA8BF,OAA9B;AACH;;AAEDC,EAAAA,uBAAuB,CAACH,KAAD,EAAQ;AAC3B,QAAIK,MAAM,GAAG,KAAKN,cAAL,CAAoBC,KAApB,CAAb;AACAN,IAAAA,KAAK,CAACY,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACRA,MAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BN,MAA/B;AACA,aAAOI,MAAP;AACH,KAJL;AAMH;;AAEDL,EAAAA,wBAAwB,CAACF,OAAD,EAAU;AAC9B,UAAMU,WAAW,GAAGlB,KAAK,CAACY,YAAN,CAAmBO,QAAnB,CAA4BL,GAA5B,CAChBK,QAAQ,IAAIA,QADI,EAEhBC,KAAK,IACL;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACD,QAAlB;AACA,UAAIC,KAAK,CAACD,QAAN,CAAeI,MAAf,KAA0B,GAA9B,EAAmC,OAAOC,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAtB,MAAAA,KAAK,CAACY,YAAN,CAAmBO,QAAnB,CAA4BO,KAA5B,CAAkCR,WAAlC;AAEAjB,MAAAA,cAAc,CAAC0B,YAAf,GACCC,IADD,CAEIT,QAAQ,IAAI;AACRE,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,aAAKf,iBAAL,CAAuBY,QAAQ,CAACU,IAAT,CAAcvB,KAArC;AACA,YAAIwB,YAAY,CAACC,OAAb,CAAqB7B,sCAArB,CAAJ,EAAmE4B,YAAY,CAACE,OAAb,CAAqB9B,sCAArB,EAA6DiB,QAAQ,CAACU,IAAT,CAAcvB,KAA3E;AACnE2B,QAAAA,cAAc,CAACD,OAAf,CAAuB7B,wCAAvB,EAAiEgB,QAAQ,CAACU,IAAT,CAAcvB,KAA/E;AACH,OAPL,EASC4B,KATD,CAUId,KAAK,IAAI;AACLa,QAAAA,cAAc,CAACE,KAAf;AACAL,QAAAA,YAAY,CAACK,KAAb;AACAd,QAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACAd,QAAAA,OAAO;AACP,eAAOgB,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACH,OAhBL;AAkBH,KA5Be,CAApB;AA8BH;;AArDS;;AAARhB,O,CACKgC,kB,GAAqB,I;AAuDhC,eAAe,IAAIhC,OAAJ,EAAf","sourcesContent":["import Axios from \"axios\"\r\nimport AccountService from \"./AccountService\"\r\nimport { LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY, SESSION_STORAGE_AUTHENTICATION_TOKEN_KEY } from '../Utility/GlobalConstants'\r\n\r\nclass ApiUtil {\r\n    static requestInterceptor = null\r\n    \r\n    createJwtToken(token) {\r\n        return 'Bearer ' + token\r\n    }\r\n\r\n    setupInterceptors(token, handler) {\r\n        this.setupRequestInterceptor(token)\r\n        this.setupResponseInterceptor(handler)\r\n    } \r\n\r\n    setupRequestInterceptor(token) {\r\n        let header = this.createJwtToken(token)\r\n        Axios.interceptors.request.use(\r\n            (config) => {\r\n                config.headers.authorization = header\r\n                return config\r\n            }\r\n        )\r\n    }\r\n\r\n    setupResponseInterceptor(handler) {\r\n        const interceptor = Axios.interceptors.response.use(\r\n            response => response,\r\n            error =>\r\n            {\r\n                console.log(\"Error has occured\")\r\n                console.log(error.response)\r\n                if (error.response.status !== 401) return Promise.reject(error);\r\n                console.log(\"Error was 401\")\r\n                Axios.interceptors.response.eject(interceptor)\r\n\r\n                AccountService.refreshToken()\r\n                .then(\r\n                    response => {\r\n                        console.log(\"I got to response\")\r\n                        this.setupInterceptors(response.data.token)\r\n                        if (localStorage.getItem(LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY))  localStorage.setItem(LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY, response.data.token)\r\n                        sessionStorage.setItem(SESSION_STORAGE_AUTHENTICATION_TOKEN_KEY, response.data.token)\r\n                    }\r\n                )\r\n                .catch(\r\n                    error => {\r\n                        sessionStorage.clear()\r\n                        localStorage.clear()\r\n                        console.log(\"I got here to catch error in refresh API\")\r\n                        handler()\r\n                        return Promise.reject(error);\r\n                    }\r\n                )\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default new ApiUtil()"]},"metadata":{},"sourceType":"module"}