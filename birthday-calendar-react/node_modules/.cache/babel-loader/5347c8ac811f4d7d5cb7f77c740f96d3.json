{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Birthday Calendar\\\\birthday-calendar-react\\\\src\\\\Components\\\\Pages\\\\SignUpPage.jsx\";\nimport React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button'; //import ReactDatePicker from 'react-datepicker'\n//import \"react-datepicker/dist/react-datepicker.css\";\n\nimport * as yup from 'yup';\nimport { Formik, Form, Field } from 'formik';\nconst signUpValidation = yup.object().shape({\n  username: yup.string().required('Username is required'),\n  password: yup.string().min(8, 'Passwords needs to be longer than 8 characters').matches(/[a-z]/, 'Password needs at least 1 lowercase character.').matches(/[A-Z]/, 'Password needs at least 1 uppercase character.').matches(/[0-9]/, 'Password needs at least a number.')\n  /*confirmPassword: yup.string()\r\n      .required(),\r\n  firstName: yup.string()\r\n    .max(50, 'Too Long!')\r\n    .required('Required'),\r\n  ,lastName: yup.string()\r\n    .max(50, 'Too Long!')\r\n    .required('Required'),\r\n  email: yup.string()\r\n    .email('Invalid email')\r\n    .required('Required'),*/\n\n});\n\nclass SignUpPage extends Component {\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  render() {\n    let initialState = {\n      username: '',\n      password: ''\n    };\n    return /*#__PURE__*/React.createElement(Formik, {\n      initialValues: initialState,\n      validationSchema: signUpValidation,\n      onSubmit: this.onSubmit,\n      validateOnChange: false,\n      validateOnBlur: false,\n      enableReinitialize: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, props => {\n      return /*#__PURE__*/React.createElement(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"fieldset\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 37\n        }\n      }, \"Username\"), /*#__PURE__*/React.createElement(Field, {\n        className: \"form-control\",\n        type: \"text\",\n        name: \"username\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(\"fieldset\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 37\n        }\n      }, \"Password\"), /*#__PURE__*/React.createElement(Field, {\n        className: \"form-control\",\n        type: \"text\",\n        name: \"password\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 33\n        }\n      }, \"Submit\"));\n    });\n  }\n\n  onSubmit(values) {\n    console.log(values);\n  }\n\n}\n\nexport default SignUpPage;","map":{"version":3,"sources":["D:/Projects/Birthday Calendar/birthday-calendar-react/src/Components/Pages/SignUpPage.jsx"],"names":["React","Component","Button","yup","Formik","Form","Field","signUpValidation","object","shape","username","string","required","password","min","matches","SignUpPage","constructor","props","onSubmit","bind","render","initialState","values","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,wBAAnB,C,CACA;AAEA;;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,QAAoC,QAApC;AAEA,MAAMC,gBAAgB,GAAGJ,GAAG,CAACK,MAAJ,GAAaC,KAAb,CAAmB;AACxCC,EAAAA,QAAQ,EAAEP,GAAG,CAACQ,MAAJ,GACLC,QADK,CACI,sBADJ,CAD8B;AAGxCC,EAAAA,QAAQ,EAAEV,GAAG,CAACQ,MAAJ,GACLG,GADK,CACD,CADC,EACE,gDADF,EAELC,OAFK,CAEG,OAFH,EAEY,gDAFZ,EAGLA,OAHK,CAGG,OAHH,EAGY,gDAHZ,EAILA,OAJK,CAIG,OAJH,EAIY,mCAJZ;AAKV;;;;;;;;;;;;AARwC,CAAnB,CAAzB;;AAqBA,MAAMC,UAAN,SAAyBf,SAAzB,CAAmC;AAC/BgB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,QAAIC,YAAY,GAAG;AACfZ,MAAAA,QAAQ,EAAE,EADK;AAEfG,MAAAA,QAAQ,EAAE;AAFK,KAAnB;AAIA,wBACI,oBAAC,MAAD;AACI,MAAA,aAAa,EAAES,YADnB;AAEI,MAAA,gBAAgB,EAAEf,gBAFtB;AAGI,MAAA,QAAQ,EAAE,KAAKY,QAHnB;AAII,MAAA,gBAAgB,EAAE,KAJtB;AAKI,MAAA,cAAc,EAAE,KALpB;AAMI,MAAA,kBAAkB,EAAE,IANxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASSD,KAAD,IACA;AACI,0BACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAU,QAAA,SAAS,EAAC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAC,cAAjB;AAAgC,QAAA,IAAI,EAAC,MAArC;AAA4C,QAAA,IAAI,EAAC,UAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ,eAKI;AAAU,QAAA,SAAS,EAAC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAC,cAAjB;AAAgC,QAAA,IAAI,EAAC,MAArC;AAA4C,QAAA,IAAI,EAAC,UAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CALJ,eASI,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,SAAhB;AAA0B,QAAA,IAAI,EAAC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBATJ,CADJ;AAaH,KAxBT,CADJ;AA6BH;;AAEDC,EAAAA,QAAQ,CAACI,MAAD,EAAS;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACH;;AA7C8B;;AAgDnC,eAAeP,UAAf","sourcesContent":["import React, {Component} from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\n//import ReactDatePicker from 'react-datepicker'\r\n\r\n//import \"react-datepicker/dist/react-datepicker.css\";\r\nimport * as yup from 'yup'\r\nimport { Formik, Form, Field } from 'formik'\r\n\r\nconst signUpValidation = yup.object().shape({\r\n    username: yup.string()\r\n        .required('Username is required'),\r\n    password: yup.string()\r\n        .min(8, 'Passwords needs to be longer than 8 characters')\r\n        .matches(/[a-z]/, 'Password needs at least 1 lowercase character.')\r\n        .matches(/[A-Z]/, 'Password needs at least 1 uppercase character.')\r\n        .matches(/[0-9]/, 'Password needs at least a number.'),\r\n    /*confirmPassword: yup.string()\r\n        .required(),\r\n    firstName: yup.string()\r\n      .max(50, 'Too Long!')\r\n      .required('Required'),\r\n    ,lastName: yup.string()\r\n      .max(50, 'Too Long!')\r\n      .required('Required'),\r\n    email: yup.string()\r\n      .email('Invalid email')\r\n      .required('Required'),*/\r\n  });\r\n\r\nclass SignUpPage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n    }\r\n\r\n    render() {\r\n        let initialState = {\r\n            username: '',\r\n            password: ''\r\n        }\r\n        return (\r\n            <Formik\r\n                initialValues={initialState}\r\n                validationSchema={signUpValidation}\r\n                onSubmit={this.onSubmit}\r\n                validateOnChange={false}\r\n                validateOnBlur={false}\r\n                enableReinitialize={true}\r\n            >\r\n                {\r\n                    (props) => \r\n                    {\r\n                        return (\r\n                            <Form>\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>Username</label>\r\n                                    <Field className=\"form-control\" type=\"text\" name=\"username\"/>\r\n                                </fieldset>\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>Password</label>\r\n                                    <Field className=\"form-control\" type=\"text\" name=\"password\"/>\r\n                                </fieldset>\r\n                                <Button variant=\"primary\" type=\"submit\">Submit</Button>\r\n                            </Form>\r\n                        )\r\n                    }\r\n                }\r\n            </Formik>            \r\n        )\r\n    }\r\n\r\n    onSubmit(values) {\r\n        console.log(values)\r\n    }\r\n}\r\n\r\nexport default SignUpPage"]},"metadata":{},"sourceType":"module"}