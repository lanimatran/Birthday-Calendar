{"ast":null,"code":"import Axios from \"axios\";\nimport AccountService from \"./AccountService\";\nimport { LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY, SESSION_STORAGE_AUTHENTICATION_TOKEN_KEY } from '../Utility/GlobalConstants';\n\nclass ApiUtil {\n  createJwtToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  setupInterceptors(token) {\n    this.setupRequestInterceptor(token);\n    this.setupResponseInterceptor();\n  }\n\n  setupRequestInterceptor(token) {\n    let header = this.createJwtToken(token);\n    Axios.interceptors.request.use(config => {\n      config.headers.authorization = header;\n      return config;\n    });\n  }\n\n  setupResponseInterceptor() {\n    const interceptor = Axios.interceptors.response.use(response => response, error => {\n      console.log(\"Error has occured\");\n      console.log(error.response);\n      if (error.response.status !== 401) return Promise.reject(error);\n      console.log(\"Error was 401\");\n      Axios.interceptors.response.eject(interceptor);\n      AccountService.refreshToken().then(response => {\n        console.log(\"I got to response\");\n        this.setupInterceptors(response.data.token);\n        if (localStorage.getItem(LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY)) localStorage.setItem(LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY, response.data.token);\n        sessionStorage.setItem(SESSION_STORAGE_AUTHENTICATION_TOKEN_KEY, response.data.token);\n      }).catch(error => {\n        sessionStorage.clear();\n        localStorage.clear();\n        console.log(\"Err again\");\n        console.log(error.response);\n        return Promise.reject(error);\n      });\n    });\n  }\n\n}\n\nexport default new ApiUtil();","map":{"version":3,"sources":["D:/Projects/Birthday Calendar/birthday-calendar-react/src/ApiServices/ApiUtil.js"],"names":["Axios","AccountService","LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY","SESSION_STORAGE_AUTHENTICATION_TOKEN_KEY","ApiUtil","createJwtToken","token","setupInterceptors","setupRequestInterceptor","setupResponseInterceptor","header","interceptors","request","use","config","headers","authorization","interceptor","response","error","console","log","status","Promise","reject","eject","refreshToken","then","data","localStorage","getItem","setItem","sessionStorage","catch","clear"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,sCAAT,EAAiDC,wCAAjD,QAAiG,4BAAjG;;AAEA,MAAMC,OAAN,CAAc;AACVC,EAAAA,cAAc,CAACC,KAAD,EAAQ;AAClB,WAAO,YAAYA,KAAnB;AACH;;AAEDC,EAAAA,iBAAiB,CAACD,KAAD,EAAQ;AACrB,SAAKE,uBAAL,CAA6BF,KAA7B;AACA,SAAKG,wBAAL;AACH;;AAEDD,EAAAA,uBAAuB,CAACF,KAAD,EAAQ;AAC3B,QAAII,MAAM,GAAG,KAAKL,cAAL,CAAoBC,KAApB,CAAb;AACAN,IAAAA,KAAK,CAACW,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACRA,MAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BN,MAA/B;AACA,aAAOI,MAAP;AACH,KAJL;AAMH;;AAEDL,EAAAA,wBAAwB,GAAG;AACvB,UAAMQ,WAAW,GAAGjB,KAAK,CAACW,YAAN,CAAmBO,QAAnB,CAA4BL,GAA5B,CAChBK,QAAQ,IAAIA,QADI,EAEhBC,KAAK,IACL;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACD,QAAlB;AACA,UAAIC,KAAK,CAACD,QAAN,CAAeI,MAAf,KAA0B,GAA9B,EAAmC,OAAOC,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACArB,MAAAA,KAAK,CAACW,YAAN,CAAmBO,QAAnB,CAA4BO,KAA5B,CAAkCR,WAAlC;AAEAhB,MAAAA,cAAc,CAACyB,YAAf,GACCC,IADD,CAEIT,QAAQ,IAAI;AACRE,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,aAAKd,iBAAL,CAAuBW,QAAQ,CAACU,IAAT,CAActB,KAArC;AACA,YAAIuB,YAAY,CAACC,OAAb,CAAqB5B,sCAArB,CAAJ,EAAmE2B,YAAY,CAACE,OAAb,CAAqB7B,sCAArB,EAA6DgB,QAAQ,CAACU,IAAT,CAActB,KAA3E;AACnE0B,QAAAA,cAAc,CAACD,OAAf,CAAuB5B,wCAAvB,EAAiEe,QAAQ,CAACU,IAAT,CAActB,KAA/E;AACH,OAPL,EASC2B,KATD,CAUId,KAAK,IAAI;AACLa,QAAAA,cAAc,CAACE,KAAf;AACAL,QAAAA,YAAY,CAACK,KAAb;AACAd,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACD,QAAlB;AACA,eAAOK,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACH,OAhBL;AAkBH,KA5Be,CAApB;AA8BH;;AAnDS;;AAsDd,eAAe,IAAIf,OAAJ,EAAf","sourcesContent":["import Axios from \"axios\"\r\nimport AccountService from \"./AccountService\"\r\nimport { LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY, SESSION_STORAGE_AUTHENTICATION_TOKEN_KEY } from '../Utility/GlobalConstants'\r\n\r\nclass ApiUtil {    \r\n    createJwtToken(token) {\r\n        return 'Bearer ' + token\r\n    }\r\n\r\n    setupInterceptors(token) {\r\n        this.setupRequestInterceptor(token)\r\n        this.setupResponseInterceptor()\r\n    } \r\n\r\n    setupRequestInterceptor(token) {\r\n        let header = this.createJwtToken(token)\r\n        Axios.interceptors.request.use(\r\n            (config) => {\r\n                config.headers.authorization = header\r\n                return config\r\n            }\r\n        )\r\n    }\r\n\r\n    setupResponseInterceptor() {\r\n        const interceptor = Axios.interceptors.response.use(\r\n            response => response,\r\n            error =>\r\n            {\r\n                console.log(\"Error has occured\")\r\n                console.log(error.response)\r\n                if (error.response.status !== 401) return Promise.reject(error);\r\n                console.log(\"Error was 401\")\r\n                Axios.interceptors.response.eject(interceptor)\r\n\r\n                AccountService.refreshToken()\r\n                .then(\r\n                    response => {\r\n                        console.log(\"I got to response\")\r\n                        this.setupInterceptors(response.data.token)\r\n                        if (localStorage.getItem(LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY))  localStorage.setItem(LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY, response.data.token)\r\n                        sessionStorage.setItem(SESSION_STORAGE_AUTHENTICATION_TOKEN_KEY, response.data.token)\r\n                    }\r\n                )\r\n                .catch(\r\n                    error => {\r\n                        sessionStorage.clear()\r\n                        localStorage.clear()\r\n                        console.log(\"Err again\")\r\n                        console.log(error.response)\r\n                        return Promise.reject(error);\r\n                    }\r\n                )\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default new ApiUtil()"]},"metadata":{},"sourceType":"module"}