{"ast":null,"code":"import Axios from \"axios\";\nimport AccountService from \"./AccountService\";\nimport { LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY, SESSION_STORAGE_AUTHENTICATION_TOKEN_KEY } from '../Utility/GlobalConstants';\n\nclass ApiUtil {\n  createJwtToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  setupInterceptors(token, handler) {\n    console.log(\"setting up interceptors\");\n    this.setupRequestInterceptor(token);\n\n    const refreshAuthLogic = failedRequest => AccountService.refreshToken(token).then(tokenRefreshResponse => {\n      localStorage.setItem('token', tokenRefreshResponse.data.token);\n      failedRequest.response.config.headers['Authorization'] = 'Bearer ' + tokenRefreshResponse.data.token;\n      return Promise.resolve();\n    });\n  }\n\n  setupRequestInterceptor(token) {\n    let header = this.createJwtToken(token);\n    const interceptor = Axios.interceptors.request.use(config => {\n      config.headers.authorization = header;\n      return config;\n    });\n    console.log(\"interceptor returned is \" + interceptor);\n    return interceptor;\n  }\n\n  setupResponseInterceptor(token, handler, requestInterceptor) {\n    const interceptor = Axios.interceptors.response.use(response => response, error => {\n      if (error.response.status !== 401) return Promise.reject(error);\n      Axios.interceptors.response.eject(interceptor);\n      Axios.interceptors.request.eject(requestInterceptor);\n      AccountService.refreshToken(token).then(response => {\n        this.setupInterceptors(response.data.token);\n        if (localStorage.getItem(LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY)) localStorage.setItem(LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY, response.data.token);\n        sessionStorage.setItem(SESSION_STORAGE_AUTHENTICATION_TOKEN_KEY, response.data.token);\n      }).catch(error => {\n        console.log(\"error again\");\n        sessionStorage.clear();\n        localStorage.clear();\n        console.log(requestInterceptor);\n        handler();\n        return Promise.reject(error);\n      });\n    });\n    return interceptor;\n  }\n\n}\n\nexport default new ApiUtil();","map":{"version":3,"sources":["D:/Projects/Birthday Calendar/birthday-calendar-react/src/ApiServices/ApiUtil.js"],"names":["Axios","AccountService","LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY","SESSION_STORAGE_AUTHENTICATION_TOKEN_KEY","ApiUtil","createJwtToken","token","setupInterceptors","handler","console","log","setupRequestInterceptor","refreshAuthLogic","failedRequest","refreshToken","then","tokenRefreshResponse","localStorage","setItem","data","response","config","headers","Promise","resolve","header","interceptor","interceptors","request","use","authorization","setupResponseInterceptor","requestInterceptor","error","status","reject","eject","getItem","sessionStorage","catch","clear"],"mappings":"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","sourcesContent":["import Axios from \"axios\"\r\nimport AccountService from \"./AccountService\"\r\nimport { LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY, SESSION_STORAGE_AUTHENTICATION_TOKEN_KEY } from '../Utility/GlobalConstants'\r\n\r\nclass ApiUtil {\r\n    createJwtToken(token) {\r\n        return 'Bearer ' + token\r\n    }\r\n\r\n    setupInterceptors(token, handler) {\r\n        console.log(\"setting up interceptors\")\r\n        this.setupRequestInterceptor(token)\r\n        const refreshAuthLogic = failedRequest => \r\n            AccountService.refreshToken(token).then(tokenRefreshResponse => {\r\n                localStorage.setItem('token', tokenRefreshResponse.data.token);\r\n                failedRequest.response.config.headers['Authorization'] = 'Bearer ' + tokenRefreshResponse.data.token;\r\n                return Promise.resolve();\r\n            })\r\n    } \r\n\r\n    setupRequestInterceptor(token) {\r\n        let header = this.createJwtToken(token)\r\n        const interceptor = Axios.interceptors.request.use(\r\n            (config) => {\r\n                config.headers.authorization = header\r\n                return config\r\n            }\r\n        )\r\n        console.log(\"interceptor returned is \" + interceptor)\r\n        return interceptor\r\n    }\r\n\r\n    setupResponseInterceptor(token, handler, requestInterceptor) {\r\n        const interceptor = Axios.interceptors.response.use(\r\n            response => response,\r\n            error =>\r\n            {\r\n                if (error.response.status !== 401) return Promise.reject(error);\r\n                Axios.interceptors.response.eject(interceptor)\r\n                Axios.interceptors.request.eject(requestInterceptor)\r\n                AccountService.refreshToken(token)\r\n                .then(\r\n                    response => {\r\n                        this.setupInterceptors(response.data.token)\r\n                        if (localStorage.getItem(LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY))  localStorage.setItem(LOCAL_STORAGE_AUTHENTICATION_TOKEN_KEY, response.data.token)\r\n                        sessionStorage.setItem(SESSION_STORAGE_AUTHENTICATION_TOKEN_KEY, response.data.token)\r\n                    }\r\n                )\r\n                .catch(\r\n                    error => {\r\n                        console.log(\"error again\")\r\n                        sessionStorage.clear()\r\n                        localStorage.clear()\r\n                        console.log(requestInterceptor)\r\n                        handler()                        \r\n                        return Promise.reject(error);\r\n                    }\r\n                )\r\n            }\r\n        )\r\n        return interceptor\r\n    }\r\n}\r\n\r\nexport default new ApiUtil()"]},"metadata":{},"sourceType":"module"}