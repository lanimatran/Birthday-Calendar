{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Birthday Calendar\\\\birthday-calendar-react\\\\src\\\\Components\\\\Pages\\\\BirthdayPage.jsx\";\nimport React, { Component } from \"react\";\nimport * as yup from 'yup';\nimport { Formik, Form, Field } from 'formik';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport BirthdayService from \"../../ApiServices/BirthdayService\";\nimport DatePicker from \"react-datepicker\"; //import moment from 'moment'\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nconst BIRTH_MONTH = [{\n  description: 'January',\n  value: 1\n}, {\n  description: 'February',\n  value: 2\n}, {\n  description: 'March',\n  value: 3\n}, {\n  description: 'April',\n  value: 4\n}, {\n  description: 'May',\n  value: 5\n}, {\n  description: 'June',\n  value: 6\n}, {\n  description: 'July',\n  value: 7\n}, {\n  description: 'August',\n  value: 8\n}, {\n  description: 'September',\n  value: 9\n}, {\n  description: 'October',\n  value: 10\n}, {\n  description: 'November',\n  value: 11\n}, {\n  description: 'December',\n  value: 12\n}];\nconst BIRTH_DAY = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];\nconst birthdayValidation = yup.object().shape({\n  firstName: yup.string().required('First Name is required'),\n  lastName: yup.string().required('Last Name is required'),\n  birthMonth: yup.string().required('First Name is required'),\n  birthDay: yup.string().required('Last Name is required'),\n  willRemindCustomTime: yup.boolean(),\n  customReminder: yup.date().when(\"willRemindCustomTime\", {\n    is: true,\n    then: yup.date().required(\"Must specify custom date\").nullable()\n  }).nullable()\n});\n\nclass BirthdayPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstName: '',\n      lastName: '',\n      birthMonth: 1,\n      birthDay: 1,\n      willRemindOneDayPrior: false,\n      willRemindOneWeekPrior: false,\n      willRemindCustomTime: false,\n      customReminder: null\n    };\n    this.changeWillRemindCustomTime = this.changeWillRemindCustomTime.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.cancel = this.cancel.bind(this);\n  }\n\n  componentDidMount() {\n    var id = this.props.match.params.id;\n\n    if (id) {\n      BirthdayService.getBirthday(id).then(response => {\n        this.setState({\n          firstName: response.data.firstName,\n          lastName: response.data.lastName,\n          birthMonth: response.data.birthMonth,\n          birthDay: response.data.birthDay,\n          willRemindOneDayPrior: response.data.willRemindOneDayPrior,\n          willRemindOneWeekPrior: response.data.willRemindOneWeekPrior,\n          willRemindCustomTime: response.data.willRemindCustomTime,\n          customReminder: response.data.customReminder ? new Date(response.data.customReminder) : null\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  }\n\n  render() {\n    let {\n      firstName,\n      lastName,\n      birthMonth,\n      birthDay,\n      willRemindOneDayPrior,\n      willRemindOneWeekPrior,\n      willRemindCustomTime,\n      customReminder\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, \"test\", /*#__PURE__*/React.createElement(Modal, {\n      show: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 21\n      }\n    }, \"Modal heading\")), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 21\n      }\n    }, \"Woohoo, you're reading this text in a modal!\"), /*#__PURE__*/React.createElement(Modal.Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 21\n      }\n    }, \"Close\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 21\n      }\n    }, \"Save Changes\"))));\n  }\n\n  changeWillRemindCustomTime(event) {\n    this.setState({\n      willRemindCustomTime: event.target.checked\n    });\n  }\n\n  onSubmit(values) {\n    var id = this.props.match.params.id;\n\n    if (id) {\n      console.log(values);\n    } else {\n      BirthdayService.addBirthday(values).then(response => {\n        console.log(response);\n        this.props.history.push('/');\n      }).catch(error => {\n        console.log(error.response);\n      });\n    }\n  }\n\n  cancel() {\n    this.props.history.push(`/`);\n  }\n\n}\n\nexport default BirthdayPage;","map":{"version":3,"sources":["D:/Projects/Birthday Calendar/birthday-calendar-react/src/Components/Pages/BirthdayPage.jsx"],"names":["React","Component","yup","Formik","Form","Field","Button","Modal","BirthdayService","DatePicker","BIRTH_MONTH","description","value","BIRTH_DAY","birthdayValidation","object","shape","firstName","string","required","lastName","birthMonth","birthDay","willRemindCustomTime","boolean","customReminder","date","when","is","then","nullable","BirthdayPage","constructor","props","state","willRemindOneDayPrior","willRemindOneWeekPrior","changeWillRemindCustomTime","bind","onSubmit","cancel","componentDidMount","id","match","params","getBirthday","response","setState","data","Date","catch","error","console","log","render","event","target","checked","values","addBirthday","history","push"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport * as yup from 'yup'\r\nimport { Formik, Form, Field } from 'formik'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport BirthdayService from \"../../ApiServices/BirthdayService\";\r\nimport DatePicker from \"react-datepicker\";\r\n//import moment from 'moment'\r\n \r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nconst BIRTH_MONTH = [\r\n    {description: 'January', value: 1},\r\n    {description: 'February', value: 2},\r\n    {description: 'March', value: 3},\r\n    {description: 'April', value: 4},\r\n    {description: 'May', value: 5},\r\n    {description: 'June', value: 6},\r\n    {description: 'July', value: 7},\r\n    {description: 'August', value: 8},\r\n    {description: 'September', value: 9},\r\n    {description: 'October', value: 10},\r\n    {description: 'November', value: 11},\r\n    {description: 'December', value: 12},\r\n]\r\n\r\nconst BIRTH_DAY = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,  15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\r\n\r\nconst birthdayValidation = yup.object().shape({\r\n    firstName: yup.string()\r\n      .required('First Name is required'),\r\n    lastName: yup.string()\r\n      .required('Last Name is required'),\r\n    birthMonth: yup.string()\r\n      .required('First Name is required'),\r\n    birthDay: yup.string()\r\n      .required('Last Name is required'),\r\n    willRemindCustomTime: yup.boolean(),\r\n    customReminder: yup.date()\r\n        .when(\"willRemindCustomTime\", \r\n            {\r\n                is: true,\r\n                then: yup.date().required(\"Must specify custom date\").nullable()\r\n            }).nullable()\r\n  });\r\n\r\nclass BirthdayPage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            firstName: '',\r\n            lastName: '',\r\n            birthMonth: 1,\r\n            birthDay: 1,\r\n            willRemindOneDayPrior: false,\r\n            willRemindOneWeekPrior: false,\r\n            willRemindCustomTime: false,\r\n            customReminder: null\r\n        }\r\n\r\n        this.changeWillRemindCustomTime = this.changeWillRemindCustomTime.bind(this)\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.cancel = this.cancel.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        var id = this.props.match.params.id\r\n        if (id) {\r\n            BirthdayService.getBirthday(id)\r\n            .then(\r\n                response => {\r\n                    this.setState({\r\n                        firstName: response.data.firstName,\r\n                        lastName: response.data.lastName,\r\n                        birthMonth: response.data.birthMonth,\r\n                        birthDay: response.data.birthDay,\r\n                        willRemindOneDayPrior: response.data.willRemindOneDayPrior,\r\n                        willRemindOneWeekPrior: response.data.willRemindOneWeekPrior,\r\n                        willRemindCustomTime: response.data.willRemindCustomTime,\r\n                        customReminder: (response.data.customReminder)?(new Date(response.data.customReminder)):null\r\n                    })\r\n                }\r\n            )\r\n            .catch (\r\n                error => {\r\n                    console.log(error)\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let {firstName, lastName, birthMonth, birthDay, willRemindOneDayPrior, willRemindOneWeekPrior, willRemindCustomTime, customReminder} = this.state\r\n        return(\r\n            <div className=\"container\">\r\n                {/*<Formik\r\n                    initialValues={firstName, lastName, birthMonth, birthDay, willRemindOneDayPrior, willRemindOneWeekPrior, willRemindCustomTime, customReminder}\r\n                    validationSchema={birthdayValidation}\r\n                    onSubmit={this.onSubmit}\r\n                    validateOnChange={false}\r\n                    validateOnBlur={true}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {\r\n                        (props) =>\r\n                        {\r\n                            let {values, errors, touched, setFieldValue} = props\r\n                            return (\r\n                                // Formik's <Form> is not compatible with React Bootstrap's <Form>. The entire section is therefore written using classic tags\r\n                                <Form>\r\n                                    <div className='row'>\r\n                                        <div className='col'>\r\n                                            <fieldset className=\"form-group\">\r\n                                                <label>First Name</label>\r\n                                                <Field className=\"form-control\" type=\"text\" name=\"firstName\" placeholder=\"First Name\"/>\r\n                                                {(errors.lastName && touched.firstName)&&(<div className=\"alert alert-danger\">{errors.firstName}</div>)}\r\n                                            </fieldset>\r\n                                        </div>\r\n                                        <div className='col'>\r\n                                            <fieldset className=\"form-group\">\r\n                                                <label>Last Name</label>\r\n                                                <Field className=\"form-control\" type=\"text\" name=\"lastName\"  placeholder=\"Last Name\"/>\r\n                                                {(errors.lastName && touched.lastName)&&(<div className=\"alert alert-danger\">{errors.lastName}</div>)}\r\n                                            </fieldset>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className='row'>\r\n                                        <div className='col'>\r\n                                            <fieldset className=\"form-group\">\r\n                                                <label>Birth Month</label>\r\n                                                <Field as=\"select\" name=\"birthMonth\">\r\n                                                {\r\n                                                    BIRTH_MONTH.map(\r\n                                                        month => <option key={month.value} value={month.value}>{month.description}</option>\r\n                                                    )\r\n                                                }\r\n                                                </Field>\r\n                                            </fieldset>\r\n                                        </div>\r\n                                        <div className='col'>\r\n                                            <fieldset className=\"form-group\">\r\n                                                <label>Birth Day</label>\r\n                                                <Field as=\"select\" name=\"birthDay\">\r\n                                                {\r\n                                                    BIRTH_DAY.map(\r\n                                                        day => <option key={day} value={day}>{day}</option>\r\n                                                    )\r\n                                                }\r\n                                                </Field>\r\n                                            </fieldset>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className='row'>\r\n                                        <fieldset className=\"form-check\">\r\n                                            <Field type=\"checkbox\" id=\"willRemindOneDayPrior\" name=\"willRemindOneDayPrior\"/>\r\n                                            <label htmlFor=\"willRemindOneDayPrior\">&nbsp;Remind me one day prior to this birthday</label>\r\n                                        </fieldset>\r\n                                    </div>\r\n                                    <div className='row'>\r\n                                        <fieldset className=\"form-check\">\r\n                                            <Field type=\"checkbox\" id=\"willRemindOneWeekPrior\" name=\"willRemindOneWeekPrior\"/>\r\n                                            <label htmlFor=\"willRemindOneWeekPrior\">&nbsp;Remind me one week prior to this birthday</label>\r\n                                        </fieldset>\r\n                                    </div>\r\n                                    <div className='row'>\r\n                                        <fieldset className=\"form-check\">\r\n                                            <Field type=\"checkbox\" id=\"willRemindCustomTime\" name=\"willRemindCustomTime\" checked={values.willRemindCustomTime}/>\r\n                                            <label htmlFor=\"willRemindCustomTime\">&nbsp;Remind me at a custom time</label>\r\n                                            <DatePicker \r\n                                                autoComplete=\"off\"\r\n                                                selected={values.customReminder}\r\n                                                showTimeSelect\r\n                                                timeIntervals={15}\r\n                                                dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n                                                className=\"form-control\"\r\n                                                name=\"customReminder\"\r\n                                                onChange={\r\n                                                            date => {\r\n                                                                setFieldValue('customReminder', date)\r\n                                                                if (date) setFieldValue('willRemindCustomTime', true)\r\n                                                                else{\r\n                                                                    setFieldValue('willRemindCustomTime', false)\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                            />\r\n                                            {(errors.customReminder && touched.customReminder)?(<div className=\"alert alert-danger\">{errors.customReminder}</div>):(<div> </div>)}\r\n                                        </fieldset>\r\n                                    </div>\r\n                                    <div className='row'>\r\n                                        <Button variant=\"success\" type=\"submit\">Save</Button>\r\n                                        <Button variant=\"primary\" onClick={this.cancel}>Cancel</Button>\r\n                                    </div>                                    \r\n                                </Form>\r\n                            )\r\n                        }\r\n                    }\r\n                </Formik>*/}\r\n                test\r\n                <Modal show={true}>\r\n                    <Modal.Header>\r\n                    <Modal.Title>Modal heading</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\r\n                    <Modal.Footer>\r\n                    <Button variant=\"secondary\">\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\">\r\n                        Save Changes\r\n                    </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    changeWillRemindCustomTime(event) {\r\n        this.setState({willRemindCustomTime: event.target.checked})\r\n    }\r\n\r\n    onSubmit(values) {\r\n        var id = this.props.match.params.id\r\n        if (id) {\r\n            console.log(values)\r\n        }\r\n        else{\r\n            BirthdayService.addBirthday(values)\r\n            .then(\r\n                response => {\r\n                    console.log(response)\r\n                    this.props.history.push('/')\r\n                }\r\n            )\r\n            .catch(\r\n                error => {\r\n                    console.log(error.response)\r\n                }\r\n            )\r\n        }\r\n        \r\n    }\r\n\r\n    cancel() {\r\n        this.props.history.push(`/`)\r\n    }\r\n}\r\n\r\nexport default BirthdayPage"]},"metadata":{},"sourceType":"module"}